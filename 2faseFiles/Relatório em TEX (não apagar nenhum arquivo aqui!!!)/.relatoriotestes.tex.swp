\documentclass[12pt, a4paper]{article}
\usepackage[utf8]{inputenc}
\usepackage{enumitem}
\usepackage[a4paper, total={7in, 9in}]{geometry}
\usepackage{listings}
\usepackage{graphicx}
\begin{document}
\title {\textbf{MAC 216} \\ Relatório da segunda parte do projeto\\}
\author {Cesar Gasparini Fernandes (10297630) \\ Artur M. R. dos
Santos (10297734)\\ Daniel Silva Nunes (10297612)}
\date {22/10/2017}
\maketitle
\section{Visão geral}
Na segunda fase do projeto, implementamos o código em arena.c, juntamente com o arena.h, que representam a arena em que as batalhas entre os exércitos de robôs ocorrerão no jogo. Ela possui as funções de sistema, criação e destruição de um robô, atualização, coleção dos cristais, ataque, encerramento do jogo, movimentação e, claro, a de inicialização da arena.
Portanto, na nossa implementação, a arena que gerencia todo o
jogo, executando as principais funções para que o jogo possa
ocorrer.\par
A movimentação foi feita usando o grid hexagonal, de forma que
valores determinam para qual local o robô se movimenta (descrito
no código de arena.c).\par
A função de ataque possui somente uma opção de ataque, mas
futuramente iremos implementar ataques diferenciados para os
robôs.\par
Para a segunda fase do projeto, o sistema está elaborado de modo a administrar as ações de uma máquina no jogo, possuindo apenas a estrutura geral de um escalonador, mas que ainda não lida com múltiplos robôs e exércitos. \par
A função sistema, a principal do programa, gerencia todo o cenário
do jogo, sendo a única que manipula a pilha de forma direta.
Ademais, é necessário uma requisição ao sistema para que os robôs
possam executar seus pedidos, assim, evitamos possíveis ações
indesejadas e trapaças (cheats).\par
Os arquivos da 1 a fase necessitaram algumas alterações:\par
\begin{itemize}

\item O montador foi adaptado de modo a compor o array \textbf{prog} no código gerado com o formato correto do instrução, que agora conta com um \textbf{OpCode} e um \textbf{Operando}. Operandos possuem um \textbf{tipo} e um valor. (Ver exemplo do montador abaixo)
\item O maq.c, que possui as instruções, recebeu cases adicionais para
tratar as interações com a arena. Por consequência, a struct \textbf{Máquina}, em maq.h, recebeu alterações em sua struct. Os valores que estão
dentro das structs 'Célula' e 'Robô' foram acessados de maneira
diferente da implementação anterior, pois agora acessamos valores
destas.
\item As instruções em \textbf{instr.h} foram ampliadas, como dito anteriormente, e sua estrutura foi levemente alterada. Foram especificados
novos tipos, direções para movimentação na arena, e o operando
(OPERANDO) recebeu novos valores que foram implementados por meio
de uma struct e uma union. Uma observação: a union foi criada
porque temos o intuito de criar um 'box' na próxima fase do
projeto (na parte gráfica), e portanto, poderemos acessar os
valores que desejamos apenas 'chamando' essa union.
\end{itemize}
Ao implementar a arena e o sistema, decidimos implementar ambos em um código só, arena.c, pois achamos mais fácil manipular a arena no mesmo arquivo do sistema e para diminuir o fluxo de dados entre os arquivos, entretanto separamos, no codigo, nitidamente o que é do sistema e o que é da arena.\par
Segue agora alguma de nossas implementações na arena:\par
\begin{itemize}
	\item Decidimos implementar, ao invéz da intrução "SIS", as funções "MOV", "ATK", "CLT", "DEP", e "INF" (que serão explicadas mais adiante), pois achamos que ficaria mais fácil para o jogador digitar o seu código.
	\item O usuário não necessita empilhar as ações na pilha de dados para chamar o sistema, achamos melhor ele apenas usar um dos comandos acima, tornando assim o codigo mais curto, prático e compreensível. Internamente, o comando chama direto o sistema, passando como argumento a ação e a direção que se deseja executar (também passa o ponteiro de sua máquina).
	\item Sempre que o usuário requisitar uma ação ao sistema, ele empilhará "true" ou "false" na pilha de dados do robo indicando se foi possível realizar a ação, ou se não foi possível, respectivamente.
	\item Quando o usuário pede informação da célula e quer saber o índice de um ítem com o ATR, a ordem é, em função do argumento: 
	\begin{itemize}
	\item[1] "tipo de terreno"; 
	\item[2]"está vazia"; 
	\item[3]"número de cristais"; 
	\item[4] "é base".
	\end{itemize}
	\item Quando o usuário quer saber se a célula está vazia, ele pode receber "0" que indica "não está", ou "1" que indica "está sendo ocupada por um robo do time 1", ou "2" que indica "está sendo ocupada por um robo do time 2", e assim por diante.
	\item O mapa da arena é gerado, em grande parte aleatoriamente.
	\item Acabamos nos antecipando e, nos comentários, estão implementações preparadas eventualmente para a terceira parte, as quais são irrelevantes ou não totalmente corretas no momento.
	\item Quando um robô "morre", isto é, o atributo vida chega a zero, ele acaba "derrubando" seus cristais ao seu redor (de forma aleatória).
	\item Para um time ganhar um ponto, ele deve depositar um cristal em sua base, caso ele deposite um cristal na base inimiga, o inimigo ganhará um ponto.
\end{itemize}
Foi apresentada apenas uma visão geral da estrutura do sistema nessa segunda fase. Para mais detalhes, está tudo comentado no código.

\section{Testes}
\subsection{Montador}
No momento, para que os códigos gerados funcionem bem com o Makefile feito, o arquivo gerado pelo montador deverá obrigatoriamente se chamar \textbf{tprog.c}. Assim, a execução do montador no terminal deve ser feita da seguinte forma:
\begin{lstlisting}
python montador < (arquivo com opcodes) > tprog.c
\end{lstlisting}
O seguinte código em "linguagem de máquina" no arquivo \textbf{tprog} foi dado na entrada do montador pela entrada padrão e gerou o seguinte código em linguagem C no arquivo \textbf{tprog.c} como está mostrado a seguir:
\begin{center}
Código em tprog:
\lstinputlisting{tprogtex}
\clearpage
Código em tprog.c:
\lstinputlisting[language = C]{tprogtex.c}
\end{center}
Nas fases seguintes adicionaremos maior flexibilidade ao montador, se for necessário.
O código em tprog foi feito a fim de testar o funcionamento das novas funções que realizam operações aritméticas. O resultado obtido a partir da execução do arquivo "arena", executável do tprog.c, foi:
\begin{lstlisting}
2
3
16
1
\end{lstlisting}
\clearpage
\subsection{Chamadas ao sistema}
Primeiramente, para executar o programa gerado pelo montador na máquina virtual e verificar o funcionamento geral do sistema, deve-se executar o arquivo \textbf{arena} gerado pelo makefile da seguinte forma:\par
\begin{lstlisting}
./arena
\end{lstlisting}
O jogador faz chamadas ao sistema usando principalmente cinco das funções implementadas em maq.c. São elas:
\begin{itemize}
\item MOV \textit{Dir}: Solicitação para mover-se na arena para uma nova célula, indica pelo argumento Dir, que pode assumir os valores NORTH, SOUTH, NORTHEAST, SOUTHEAST, NORTHWEST, SOUTHWEST ou CURRENT.
\item ATK \textit{Dir}: Ataca a célula vizinha ou a própria célula indicada pela direção do argumento Dir, com comportamento similar ao da função MOV.
\item CLT \textit{Dir}: Coleta cristais, se existirem, na célula vizinha indicada pelo argumento Dir, com comportamento similar ao das funções anteriores.
\item INF: Solicita ao sistema informações sobre a célula em que ele está. O sistema então empilha um objeto do tipo \textbf{Celula} na pilha de dados da máquina.
\item DEP \textit{Dir}: Deposita cristais na célula indicada por Dir.

Executando o código a seguir:
\lstinputlisting{tprogtex2}
Obteve-se a seguinte saída:
\lstinputlisting{output}
Que significa, de acordo com cada linha, que:
\begin{itemize}
\item O robô conseguiu se mover para a célula norte 
\item Não conseguiu atacar a célula ao norte de sua posição (pois ela está vazia, só há um robô na arena por enquanto)
\item A informação pedida sobre célula atual, o atributo 1 (que é se está vazia ou não), retornou 0 (falso, mas \textbf{vazia} é int na structure Celula)
\item Tentou coletar cristais na célula sul mas não conseguiu, pois não havia cristais lá, então retornou falso.
\item Tentou depositar seu cristais na célula a sudeste de sua posição, mas não conseguiu porque não possui cristais.
\end{itemize}
\subsection{Makefile}
O makefile feito compõe um executável chamado provisoriamente de \textbf{arena} a partir dos outros códigos feitos e/ou modificados ao longo do projeto. O makefile necessita que o arquivo gerado pelo montador tenha nome \textbf{tprog.c}. Nas fases futuras, adicionaremos maior flexibilidade nesse aspecto. Utilizamos variáveis para compor suas instruções:
\lstinputlisting{makef}
\clearpage
\item Execução do makefile:
\begin{lstlisting}
make clean
\end{lstlisting}
\lstinputlisting{output2}
\begin{lstlisting}
make
\end{lstlisting}
\lstinputlisting{output3}
\end{itemize}

\end{document}